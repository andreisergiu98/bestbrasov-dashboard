# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthSession {
  browser: String!
  deviceOS: String!
  enabled: Boolean!
  id: String!
  lastTimeUsed: DateTime!
  userId: String!
}

input AuthSessionListRelationFilter {
  every: AuthSessionWhereInput
  none: AuthSessionWhereInput
  some: AuthSessionWhereInput
}

input AuthSessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input AuthSessionWhereInput {
  AND: [AuthSessionWhereInput!]
  NOT: [AuthSessionWhereInput!]
  OR: [AuthSessionWhereInput!]
  browser: StringFilter
  deviceOS: StringFilter
  enabled: BoolFilter
  id: StringFilter
  lastTimeUsed: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumUserRoleNullableListFilter {
  equals: [UserRole!]
  has: UserRole
  hasEvery: [UserRole!]
  hasSome: [UserRole!]
  isEmpty: Boolean
}

input EnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

type Mutation {
  changeUserRole(data: UserRoleChangeInput!, where: UserWhereUniqueInput!): User
  revokeAllSessions: Boolean!
  revokeSession(id: ID!): Boolean!
  updateUserProfile(data: UserProfileUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  activeSessions: [AuthSession!]!
  currentSession: AuthSession!
  me: User!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RoleOperations {
  push: [UserRole!]
  set: [UserRole!]
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Subscription {
  userProfileUpdate(id: String!): User
}

type User {
  _count: UserCount
  birthday: DateTime
  email: String!
  gender: String
  givenName: String
  id: String!
  lastName: String!
  phoneNumber: String
  profile: String
  roles: [UserRole!]!
  status: UserStatus
}

type UserCount {
  AuthSession: Int!
}

input UserOrderByWithRelationInput {
  AuthSession: AuthSessionOrderByRelationAggregateInput
  birthday: SortOrder
  email: SortOrder
  gender: SortOrder
  givenName: SortOrder
  id: SortOrder
  lastName: SortOrder
  phoneNumber: SortOrder
  profile: SortOrder
  roles: SortOrder
  status: SortOrder
}

input UserProfileUpdateInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  givenName: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  profile: NullableStringFieldUpdateOperationsInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole {
  ADMIN
  GUEST
  MODERATOR
  STANDARD
  SUPER_ADMIN
}

input UserRoleChangeInput {
  roles: RoleOperations!
}

enum UserScalarFieldEnum {
  birthday
  email
  gender
  givenName
  id
  lastName
  phoneNumber
  profile
  roles
  status
}

enum UserStatus {
  ACTIVE
  ALUMNUS
  BABY
  BOARDIE
  EXCLUDED
  FORMER
  MDV
}

input UserWhereInput {
  AND: [UserWhereInput!]
  AuthSession: AuthSessionListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  birthday: DateTimeNullableFilter
  email: StringFilter
  gender: StringNullableFilter
  givenName: StringNullableFilter
  id: StringFilter
  lastName: StringFilter
  phoneNumber: StringNullableFilter
  profile: StringNullableFilter
  roles: EnumUserRoleNullableListFilter
  status: EnumUserStatusNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
